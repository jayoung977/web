<html lang="ko" class="h-100">
  <head>
    <%- include('include/include', { title: 'Signin' })%>
  </head>
  <body class="d-flex h-100 text-center text-bg-dark">
    <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
      <%- include('include/include_nav')%>
      <main class="px-3">
        <h1>로그인</h1>
        <!-- 
      [로그인] 버튼을 클릭하면 profile.ejs(회원정보 수정 페이지)에서 
      특정 유저 정보를 보여주어야 하기 때문에 
      userid 정보를 value에 저장(POST /user/signin 요청의 응답을 받은 후 수행)하여
      폼(input)이 보이지 않도록 hidden 처리함
    -->
        <form name="form_info" action="/user/profile" method="POST">
          <input type="hidden" name="userid" />
        </form>
        <form name="form_info2chat" action="/chat" method="POST">
          <input type="hidden" name="userid" />
        </form>

        <form name="form_login" class="form_login">
          <label for="userid"> ID </label>
          <input id="userid" type="text" name="userid" required /><br />
          <label for="password">Password</label>
          <input id="password" type="password" name="pw" required /><br />
          <button type="button" onclick="login();">Login</button>
        </form>

        <a href="/user/signup">signup</a>
      </main>
      <%- include('include/include_footer')%>
    </div>

    <script>
      // 로그인 a태그 클래스 active
      document.querySelectorAll("a")[1].classList.add("active");
      // 홈 클래스 a태그 active 지우기
      for (let i of [0, 2])
        if (document.querySelectorAll("a")[i].classList.contains("active")) {
          document.querySelectorAll("a")[i].classList.remove("active");
        }
      function login() {
        const form_login = document.forms["form_login"];

        if (!form_login.checkValidity()) {
          form_login.reportValidity();
          return;
        }

        axios({
          method: "POST",
          url: "/user/signin",
          data: {
            userid: form_login.userid.value,
            pw: form_login.pw.value,
          },
        })
          .then((res) => {
            return res.data;
          })
          .then((data) => {
            console.log("post profile >>", data); // true or false
            if (data) {
              // true
              // (1) alert 띄우기
              console.log("confirm");
              if (!confirm("로그인 성공 \n회원정보 수정을 원하십니까?")) {
                //아니요 ->chat
                const form_info2chat = document.forms["form_info2chat"];
                form_info2chat.userid.value = form_login.userid.value;
                console.log(
                  "form_info2chat.userid.value>>>",
                  form_info2chat.userid.value
                );
                form_info2chat.submit();
              } else {
                // (2) form_info 폼 선택
                const form_info = document.forms["form_info"];
                // (3) form_login의 userid 값을 form_ingo의 userid value에 저장
                form_info.userid.value = form_login.userid.value;
                // (4) form_info 제출
                // form[name="form_info"] 요소의 method와 action 속성 값에 의해
                // POST /user/profile 요청을 수행
                // <button type="submit> 을 누른 것과 동일한 효과 => 얘만 일반 폼 전송
                form_info.submit();
              }
            } else {
              // false
              // (1) alert 띄우기
              alert("로그인 실패");
              // (2) form_info 초기화 (제출 안함)
              form_login.reset();
            }
          });
      }
    </script>
  </body>
</html>
